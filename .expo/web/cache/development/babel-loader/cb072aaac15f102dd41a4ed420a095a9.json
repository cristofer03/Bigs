{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Familia Feliz\\\\Bigs\\\\screens\\\\RechargeScreen.js\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as Font from 'expo-font';\nexport default function RechargeScreen(_ref) {\n  var navigation = _ref.navigation;\n  console.log(navigation);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fontsLoaded = _useState2[0],\n      setFontsLoaded = _useState2[1];\n\n  useEffect(function () {\n    if (!fontsLoaded) {\n      loadFonts();\n    }\n  });\n\n  var loadFonts = function loadFonts() {\n    return _regeneratorRuntime.async(function loadFonts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Font.loadAsync({\n              'Roboto_medium': require(\"native-base/Fonts/Roboto_medium.ttf\")\n            }));\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('@my-app:value'));\n\n          case 4:\n            setFontsLoaded(true);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handlePressButton = function handlePressButton() {\n    var guardarEjemplo;\n    return _regeneratorRuntime.async(function handlePressButton$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(MY_STORAGE_KEY));\n\n          case 2:\n            guardarEjemplo = _context2.sent;\n            alert(guardarEjemplo);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!fontsLoaded) {\n    return React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    });\n  }\n\n  return React.createElement(\"view\", {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    onPress: handlePressButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, React.createElement(\"text\", {\n    style: styles.Button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"VER\")));\n  var styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: '#fff'\n    },\n    Button: {\n      width: 350,\n      height: 50,\n      borderRadius: 25,\n      backgroundColor: '#0080FF'\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Familia Feliz/Bigs/screens/RechargeScreen.js"],"names":["React","useEffect","useState","Font","RechargeScreen","navigation","console","log","fontsLoaded","setFontsLoaded","loadFonts","loadAsync","require","AsyncStorage","setItem","handlePressButton","getItem","MY_STORAGE_KEY","guardarEjemplo","alert","styles","container","Button","StyleSheet","create","flex","backgroundColor","width","height","borderRadius"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;AAEA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAGA,eAAe,SAASC,cAAT,OAAsC;AAAA,MAAbC,UAAa,QAAbA,UAAa;AACnDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;;AADmD,kBAGbH,QAAQ,CAAC,KAAD,CAHK;AAAA;AAAA,MAG5CM,WAH4C;AAAA,MAG/BC,cAH+B;;AAKnDR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACO,WAAL,EAAkB;AAChBE,MAAAA,SAAS;AACV;AACF,GAJQ,CAAT;;AAMA,MAAMA,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACVP,IAAI,CAACQ,SAAL,CAAe;AACnB,+BAAiBC,OAAO,CAAC,qCAAD;AADL,aAAf,CADU;;AAAA;AAAA;AAAA,6CAKVC,YAAY,CAACC,OAAb,CAAqB,eAArB,CALU;;AAAA;AAOhBL,YAAAA,cAAc,CAAC,IAAD,CAAd;;AAPgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAUA,MAAMM,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGF,YAAY,CAACG,OAAb,CAAqBC,cAArB,CADH;;AAAA;AACpBC,YAAAA,cADoB;AAE1BC,YAAAA,KAAK,CAACD,cAAD,CAAL;;AAF0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAKA,MAAI,CAACV,WAAL,EAAkB;AAChB,WAAQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACD;;AAED,SACE;AAAM,IAAA,KAAK,EAAEY,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEN,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAM,IAAA,KAAK,EAAEK,MAAM,CAACE,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADA,CADF,CADF;AAQA,MAAMF,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,IAAAA,SAAS,EAAE;AACTI,MAAAA,IAAI,EAAE,CADG;AAETC,MAAAA,eAAe,EAAE;AAFR,KADoB;AAK/BJ,IAAAA,MAAM,EAAE;AACNK,MAAAA,KAAK,EAAE,GADD;AAEYC,MAAAA,MAAM,EAAE,EAFpB;AAGYC,MAAAA,YAAY,EAAE,EAH1B;AAIYH,MAAAA,eAAe,EAAE;AAJ7B;AALuB,GAAlB,CAAf;AAaD","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {StyleSheet, View, AsyncStorage, Button, Text} from 'react-native';\r\nimport * as Font from 'expo-font';\r\n\r\n\r\nexport default function RechargeScreen({navigation}) {\r\n  console.log(navigation)\r\n\r\n  const [fontsLoaded, setFontsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!fontsLoaded) {\r\n      loadFonts();\r\n    }\r\n  });\r\n\r\n  const loadFonts = async () => {\r\n    await Font.loadAsync({\r\n      'Roboto_medium': require(\"native-base/Fonts/Roboto_medium.ttf\"),\r\n    });\r\n\r\n    await AsyncStorage.setItem('@my-app:value');\r\n\r\n    setFontsLoaded(true);\r\n  }\r\n\r\n  const handlePressButton = async () => {\r\n  const guardarEjemplo = await AsyncStorage.getItem(MY_STORAGE_KEY);\r\n  alert(guardarEjemplo);\r\n  }\r\n\r\n  if (!fontsLoaded) {\r\n    return (<View/>);\r\n  }\r\n\r\n  return (\r\n    <view style={styles.container}>\r\n      <Button onPress={handlePressButton}>\r\n      <text style={styles.Button}>VER</text>\r\n      </Button>\r\n    </view>\r\n  )\r\n  \r\n  const styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      backgroundColor: '#fff',\r\n    },\r\n    Button: {\r\n      width: 350, \r\n                        height: 50, \r\n                        borderRadius: 25, \r\n                        backgroundColor: '#0080FF',\r\n    }\r\n  });\r\n\r\n}"]},"metadata":{},"sourceType":"module"}